# -*- coding: utf-8 -*-
"""Handwritten digit classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SGySZJemJ6d_31iebfJJvkwk7PTKIPrf
"""

!pip install tensorflow numpy Pillow streamlit streamlit-drawable-canvas --quiet

import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator # NEW IMPORT


(x_train, y_train), (x_test, y_test) = mnist.load_data()



# Normalize pixel values to 0-1 range
x_train = x_train.astype('float32') / 255.0
x_test = x_test = x_test.astype('float32') / 255.0 # Ensure x_test is also normalized


x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)




model = Sequential([
    Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, kernel_size=(3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

# Compile the model (no change here)
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
print("Model configured.")


print("Setting up data augmentation...")
datagen = ImageDataGenerator(
    rotation_range=10,      # randomly rotate images in the range (degrees, 0-180)
    zoom_range=0.1,         # Randomly zoom image
    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
    height_shift_range=0.1, # randomly shift images vertically (fraction of total height)
    shear_range=0.1,        # Shear Intensity (Shear angle in counter-clockwise direction in degrees)
)
# Fit the data generator on your training data
datagen.fit(x_train)
print("Data augmentation configured.")


print("Training the model with data augmentation... This will take longer.")
history = model.fit(datagen.flow(x_train, y_train, batch_size=32),
                    epochs=19,
                    validation_data=(x_test, y_test),
                    verbose=1)
print("Model training complete.")


loss, accuracy = model.evaluate(x_test, y_test, verbose=0)
print(f"Model evaluation on test set - Loss: {loss:.4f}, Accuracy: {accuracy:.4f}")


model_filename = 'best_digit_recognition_model.h5'
model.save(model_filename)
print(f"Model saved as '{model_filename}'.")





